class Solution {
public:
    int n;
    int ans = -1;
    unordered_set<int> infected;
    vector<bool> visited;
    int big = -1;
    int count, infectedCount;
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        
        for(auto &e : initial){
            infected.insert(e);
        }
        
        visited = vector<bool>(n, false);
        sort(initial.begin(), initial.end());
        for(auto &u: initial){
            if(!visited[u]){
                count = 0;
                infectedCount = 0;
                dfs(u, graph);
                if(infectedCount == 1 and big < count){
                    big = count;
                    ans = u;
                }
                
            }
        }
        
        return ans == -1 ? initial[0] : ans;
    }
    
    void dfs(int u, vector<vector<int>>& graph){
        visited[u] = true;
        if(infected.count(u) == 1){
            infectedCount++;
        }
        count++;
        for(int v = 0 ; v < n; v++){
            if(graph[u][v] == 1 and !visited[v]){
                dfs(v, graph);
            }
        }
    }
};